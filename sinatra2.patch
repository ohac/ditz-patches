diff --git a/bin/ditzweb b/bin/ditzweb
index fe4625a..895d6b0 100755
--- a/bin/ditzweb
+++ b/bin/ditzweb
@@ -13,6 +13,8 @@ $:.unshift(File.dirname(self_file) + "/../lib")
 require 'rubygems'
 require 'ditz'
 require 'sinatra'
+require 'haml'
+require 'digest'
 
 set :sessions, true
 set :root, File.dirname(self_file) + "/../lib"
@@ -30,12 +32,25 @@ def ditz_get_storage
   config.use_editor_if_possible = false # overwrite
   config.paginate = "never" # overwrite
   issue_dir = Pathname.new(config.issue_dir)
-  Ditz::FileStorage.new issue_dir
+  [config, Ditz::FileStorage.new(issue_dir)]
 end
 
 CONTENT_TYPES = {:html => 'text/html', :css => 'text/css',
     :js => 'application/javascript'}
 
+helpers do
+  include Rack::Utils; alias_method :h, :escape_html
+  def gravatar(user, s = 20)
+    email = user.split.last
+    email = email[1, email.size - 2] if email[0, 1] == '<'
+    default = '&default=identicon'
+    "http://www.gravatar.com/avatar/#{Digest::MD5.hexdigest(email)}?s=#{s}#{default}"
+  end
+  def wiki(text)
+    text.gsub(/\{issue ([[:xdigit:]]{40})\}/, '<a href="/i/\1">\1</a>')
+  end
+end
+
 before do
  request_uri = case request.env['REQUEST_URI']
    when /\.css$/; :css
@@ -46,7 +61,7 @@ before do
 end
 
 get '/' do
-  storage = ditz_get_storage
+  config, storage = ditz_get_storage
   project = storage.load
   releases = (project.unreleased_releases + [:unassigned]).inject({}) do |h,r|
     h[r] = {
@@ -55,17 +70,129 @@ get '/' do
     }
     h
   end
-  haml :index, :locals => { :releases => releases }
+  haml :index, :locals => { :project => project, :releases => releases }
+end
+
+get '/i/?' do
+  config, storage = ditz_get_storage
+  project = storage.load
+  issues = project.issues
+  component = params[:c]
+  issues = issues.select { |i| i.component == component } if component != '*'
+  release = params[:r]
+  if release != '*'
+    release = nil if release.size == 0
+    issues = issues.select { |i| i.release == release }
+  end
+  query = params[:q]
+  if query
+    ignore_case = params[:i]
+    ignore_case = ignore_case.nil? ? false : ignore_case == 'on'
+    re = Regexp.new query, ignore_case
+    issues = issues.select do |i|
+      i.title =~ re || i.desc =~ re ||
+        i.log_events.map { |time, who, what, comments| comments }.join(" ") =~ re
+    end
+  end
+  haml :issues, :locals => { :project => project, :issues => issues }
+end
+
+get '/i/new' do
+  config, storage = ditz_get_storage
+  project = storage.load
+  releases = project.releases
+  components = project.components
+  haml :new, :locals => { :releases => releases, :components => components,
+      :reference => params[:u], :summary => params[:t], :details => params[:s] }
+end
+
+get '/i/*' do |arg|
+  config, storage = ditz_get_storage
+  project = storage.load
+  releases = project.releases
+  components = project.components
+  fn = File.join '.ditz', "issue-#{arg}*.yaml"
+  issues = Dir[fn].map { |fn| Ditz::Issue.from fn }
+  haml :show, :locals => { :issues => issues, :releases => releases,
+      :components => components }
+end
+
+put '/i/*' do |arg|
+  config, storage = ditz_get_storage
+  comment = params[:comment]
+  reference = params[:reference]
+  component = params[:component]
+  status = params[:status]
+  type = params[:type]
+  user = params[:user]
+  user = config.user if user.nil? || user.size == 0
+  release = params[:release]
+  project = storage.load
+  fn = File.join '.ditz', "issue-#{arg}.yaml"
+  issue = Ditz::Issue.from fn
+  project.add_issue issue
+  if reference && reference.size > 0
+    issue.add_reference reference
+    issue.log "added reference #{issue.references.size}", user, ''
+  end
+  if type.to_sym != issue.type
+    issue.log "set type #{type} from #{issue.type}", user, ''
+    issue.type = type.to_sym
+  end
+  if release.size > 0 && release != issue.release
+    r = project.releases.find { |r| r.name == release }
+    issue.assign_to_release r, user, ''
+  end
+  if component != issue.component
+    c = project.components.find { |r| r.name == component }
+    issue.assign_to_component c, user, ''
+  end
+  if status != issue.status
+    case status
+    when 'paused'
+      issue.stop_work user, ''
+    when 'in_progress'
+      issue.start_work user, ''
+    when 'closed'
+      issue.close :fixed, user, '' # TODO :wontfix, :reorg
+    end
+  end
+  issue.log "commented", user, comment if comment.size > 0
+  storage.save project
+  redirect "/i/#{arg}"
 end
 
 # lib/ditz/operator.rb
 # lib/ditz/model.rb
 # lib/ditz/model-objects.rb
+# lib/ditz/views.rb
+# share/ditz/index.rhtml
+# share/ditz/issue_table.rhtml
 # lib/ditz/file-storage.rb
 # lib/views/index.haml
 # lib/views/show.haml
-get '/i/*' do |arg|
-  fn = File.join '.ditz', "issue-#{arg}*.yaml"
-  issues = Dir[fn].map { |fn| Ditz::Issue.from fn }
-  haml :show, :locals => { :issues => issues }
+# lib/views/new.haml
+post '/i/?' do
+  config, storage = ditz_get_storage
+  project = storage.load
+  user = params[:user] 
+  user = config.user if user.nil? || user.size == 0
+  summary = params[:summary]
+  details = params[:details] || ''
+  reference = params[:reference]
+  type = (params[:type] || :bugfix).to_sym
+  component = params[:component] ||  project.components.first.name
+  release = params[:release]
+  release = (project.releases.first.name rescue nil) if release.nil? || release.size == 0
+  issue = Ditz::Issue.create_interactively(:args => [config, project], :with => {
+      :title => summary, :desc => details, :type => type,
+      :component => component, :reporter => user, :release => release})
+  project.add_issue issue
+  issue.log "created", user, ''
+  if reference && reference.size > 0
+    issue.add_reference reference
+    issue.log "added reference #{issue.references.size}", user, ''
+  end
+  storage.save project
+  redirect "/i/#{issue.id}"
 end
diff --git a/contrib/tombloo_ditz.js b/contrib/tombloo_ditz.js
new file mode 100644
index 0000000..059e1f0
--- /dev/null
+++ b/contrib/tombloo_ditz.js
@@ -0,0 +1,32 @@
+// ../../extensions/
+models.register({
+	name : 'Ditz',
+	ICON : 'chrome://tombloo/skin/item.ico',
+	check : function(ps){
+		return (/(regular|photo|quote|link|conversation|video)/).test(ps.type) && !ps.file;
+	},
+	
+	getToken : function(){
+		return getCookieString('localhost', 'AT').split('=').pop();
+	},
+	
+	post : function(ps){
+		var self = this;
+		return request('http://localhost:4567/i/', {
+			redirectionLimit : 0,
+			sendContent : {
+//			at      : self.getToken(),
+//				tags       : joinText(ps.tags, ','),
+//				local      : this.getLocalTimestamp(),
+//				private    : ps.private? 1 : 0,
+				summary : ps.page,
+				details : joinText([ps.body, ps.description], ' ', true),
+				reference : ps.pageUrl,
+				image0  : ps.type == 'photo' ? ps.itemUrl : '',
+//      type : '',
+//      release : '',
+//      component : '',
+			},
+		});
+	},
+});
diff --git a/lib/public/blue-check.png b/lib/public/blue-check.png
new file mode 100644
index 0000000000000000000000000000000000000000..d98cfeed9e7a971d51954193420ac4089f1fb1d4
GIT binary patch
literal 745
zcmV<F0v7#=P)<h;3K|Lk000e1NJLTq000mG000mO1^@s6AM^iV00009a7bBm000XU
z000XU0RWnu7ytkOAY({UO#lFTB>(_`g8%^e{{R4h=>PzAFaQARU;qF*m;eA5Z<1fd
zMgRZ;Z%IT!RCwB?lRHclQ51&1J2Sf**^LMiN!BF+14@jE5Q5QA5F07zhy~afW5UZv
ztA!P@(1gktU}LN(umYRa!bhQo4dD?bK*A$&L|vB=SaxP-W@oPjFkzwePfl@9{`2MB
z-1`eDB|->x)i^jA1UiAsz=fUmXW$j^Jkee6?0Th?h`oTu!O2cl5kt+j6`YEdQdY8U
zO#Ov<-QdIAcf7ppN_5vhKLBVLnCLAH7d^dtu@)}?8!p)1HXx)zaR5{oUcQ^d$e1@K
zdK#YjfOA7rK~)j<%}Zx7fK3;qq(DNz;Q*8ZPu@)9<z;BRtIkmXJlE-Is)@1*{IMYG
zfbAC6$Ar%7Pdb}GQ%w}lb$S4lZMtZ$I#xn54VDF2yRgQmb>bZ{;vF%PX{b6@f)Jt|
zKm$-ztsxN9SYOLCyR_=BeX=Ub!tyHdj+ozD&*X_7)lgKe!3O|1If<FI3(PIUdcpbn
zdkalf$T|V?NY}qYE^B_vm?q@&T#2XsfxW|5;%O{92e}+()*_#^7JPtd{2J3!>qIn(
z<Jh!~rV3u5Z8SyJws9Prh$hif>zKx`F&{AB-#d_4Nl_N^2&>?_F0CU!0caihiEX>M
zu1i>jvXDn&CB=My?|=`$O0F4;GktGob*hhOM8g_EMba{?lgoJo6-hL#QGG<??W~Tm
zIMaufTmuTea-{Os;JxxQ=kL_TN+~G{A%upMAjn~uHdDI6@2_7Tt~~C(4{Ytvf&jw6
ziR0HE+%B#>-5f5js0PR+^`(vFZ|{D*xcdlL0y5iC*cYZ91%U`q3>@0&S-=Lc1sqJ{
b|LETUZs0h~dCi@c00000NkvXXu0mjfKT1Zd

literal 0
HcmV?d00001

diff --git a/lib/public/green-bar.png b/lib/public/green-bar.png
new file mode 100644
index 0000000000000000000000000000000000000000..82e770c9b4d5b2e2f184d2ba5cddf12b837a44c7
GIT binary patch
literal 2953
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

literal 0
HcmV?d00001

diff --git a/lib/public/green-check.png b/lib/public/green-check.png
new file mode 100644
index 0000000000000000000000000000000000000000..fc5029a25f4417ad92afa7489f464874dc3318df
GIT binary patch
literal 752
zcmV<M0uTL(P)<h;3K|Lk000e1NJLTq000mG000mO1^@s6AM^iV00009a7bBm000XU
z000XU0RWnu7ytkOAY({UO#lFTB>(_`g8%^e{{R4h=>PzAFaQARU;qF*m;eA5Z<1fd
zMgRZ;c1c7*RCwB?lTAoeQ5c4wGk2VE(s3N6G)+pYjcFT2iI8xUB#|3YcWp$mz?IZO
zSK_9YK}q7KU52X+0|{Dagx0{|UpUcV)RYchW}N?f?%cU8)Qh9bUicR0<@+Aa$2qSs
zO%ovmN9vt#bN~ZDH*n+7{tV0lQ!|}w@~GD|O~i3P?|kEcB9xa67h1V^{xYTIUI3zM
zgr9$Zu>N})!!!nGI@hL70eapwJaD@_&u=$(Ly19}1X(ly>^N~z3^9d;ud~F{`w!pT
zU4LN#`rco6C_>ThwcaOPvX5rOG0B$zoQfM)%){H|R~V+@e0^tC+5oaLH&kEMj8+&Y
zo>I{?4SAxz_?KDoeLyRWQ(x6gR_2BPYydVP`YOw6h-OqWGJ__yyjuO{XS!vP>6S&J
z8I{Vi8f-%J9jpfkyJ#wK+DW8h1Vi7gYhS9aV>=XNx@FPw5~&!at_p-*G+6)uJ)1?-
z(s|AOD{Xn_v0x91O+g~TG<9nQJ#B2Hl1Xwo7}@Hw296JpY;}>*HF8-<r&H*eT)+Y(
z!>PHw$PUh25xSHNuXW_T!0=iJQfAPl#F;B%FS0{2oSL%$3!~eU0o9M&@Z!LQE_DWd
z?Enn=+R>y$mpTqyxD77>)z8A{_M`<Mg1WmI9ruTps8nk47F3{^cKTP^FpMmUX~$bo
zL8VfQKeWW|W^|kgDv<Y;i*HU;kJU7lKdvjiMv>D41p*Tjn=VLbQG(G8e)-fVpT<HH
zK;mQ;1W*LjH9a~veD<pQmZ$p66@b{ER4^QffAl>KKLdh5@*oN)!gMGHPz-ng*P)jN
i_JIU&I*tFMe**wrqevEjZknS20000<MNUMnLSTYZ%t7-2

literal 0
HcmV?d00001

diff --git a/lib/public/red-check.png b/lib/public/red-check.png
new file mode 100644
index 0000000000000000000000000000000000000000..4f7e3c06c7072ab8bd2992ec1db3040dde5bb9ff
GIT binary patch
literal 715
zcmV;+0yO=JP)<h;3K|Lk000e1NJLTq000mG000mO1^@s6AM^iV00009a7bBm000XU
z000XU0RWnu7ytkOAY({UO#lFTB>(_`g8%^e{{R4h=>PzAFaQARU;qF*m;eA5Z<1fd
zMgRZ;QAtEWRCwB?lRr#TaS+Ep?@wES8fe1+O&LfK8xl<kVl)g*Tpd^(hzlD60aqQI
zh=Ybn0TDN2;y_#sVK5~ATNG=8At4Bf*rZizp^vuO_uBW@q3zR>I{8g*x!>LAes`A>
z9LM3)^m+c07Z?Ms02iyicfd2?5un!sqjMjSsn?hwN=semVg$QSL$JN#RSsjy*PU4M
z<C{6hwysq{0Dl0sWluJ@1s5X2qaa$K=3zfujq(wU^bzbm!{_IZm(-jhi<0;NK&*XR
z@^~uAngRz&DCVJDs#q~!@o5T?;ZY=yXQA3^1)!VOL?}80S^<s@s)^-eR;s*d1wzpw
zbkmw}TMz_cBoOX~LIw<t)b1vY6z)9>g$#jkH;MS`5#XK-AWPza?D1e{a$uW;Z@p*;
zu%AqWVIl`Y$dWivH$=zKDVJ2ROqyt{vZf+RG9ImjW7&oaP<3-lEf%8ywyyDW{wn{H
z*mM$8RnaVa*9D|=>Pjx1injXwl=E3|?8e!G$cZ*T`E-hOPF-=gFuA<5c(@(MYHkN#
z3x;7}=;eAd4DhvJHMeuP9cOZRXVC>@AiJ4VW>V{G$Q?b%!4Qt*#j;E+%fykq$iWbD
zM-Qp>H8zvVOa`)U3ma2|djEWU_Tgp2ccG--2%d`K>x>}F0^nd;0;Qb7_qVIO|MKJR
z_-bNyV`@;Z+X7G=UrpSG#M3*MQrG)BTVq{;mL7oAQE_i;KmY3H%WwCAJ)r20<@h!B
x&&R!hA7}-4qZ*J0e$^`1u2FCthyT&<0RU|@782+2Qd0l`002ovPDHLkV1n3wH?;r&

literal 0
HcmV?d00001

diff --git a/lib/public/yellow-bar.png b/lib/public/yellow-bar.png
new file mode 100644
index 0000000000000000000000000000000000000000..32c483a72a5d0540551a22e7f73ef05f74bb98cc
GIT binary patch
literal 2942
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

literal 0
HcmV?d00001

diff --git a/lib/views/index.haml b/lib/views/index.haml
index a6250c1..be8e340 100644
--- a/lib/views/index.haml
+++ b/lib/views/index.haml
@@ -1,16 +1,42 @@
 %html
   %head
-    %title Issue Tracker
+    %title== #{h project.name} Issue Tracker
     %link{:href => "/style.css", :rel => "stylesheet", :type => "text/css",
         :media => "screen"}
   %body
     .main
-      %h1 Issue Tracker
-      %ul
-        - releases.each do |key,release|
-          %h2= release[:title]
-          %ul
+      %h1== #{h project.name} Issue Tracker
+      %a{:href => "/i/new"} Add a new issue
+      %br
+      %a{:href => "/i"} All issues
+      %br
+      %form{:action => '/i', :method => :get}
+        %select{:name => :r}
+          %option{:value => '*', :selected => true} All
+          %option{:value => '', :selected => false} No release
+          - project.releases.each do |r|
+            %option{:value => r.name, :selected => false}= r.name
+        %select{:name => :c}
+          %option{:value => '*', :selected => true} All
+          - project.components.each do |c|
+            %option{:value => c.name, :selected => false}= c.name
+        %input{:type => :text, :name => :q}
+        %input#ignorecase{:type => :checkbox, :name => :i, :checked => true}
+        %label{:for => :ignorecase} Ignore case
+        %input{:type => :submit, :value => 'Search'}
+      %a{:href => "javascript:var%20d=document,w=window,e=w.getSelection,k=d.getSelection,x=d.selection,s=(e?e():(k)?k():(x?x.createRange().text:0)),f='http://localhost:4567/i/new',l=d.location,e=encodeURIComponent,p='?u='+e(l.href)+'&t='+e(d.title)+'&s='+e(s),u=f+p;l.href=u;"} Bookmarklet
+      - releases.each do |key,release|
+        %h2= h release[:title]
+        %table
+          %tbody
             - release[:issues].each do |issue|
-              %li
-                %a{:href => "/i/#{issue.id}"}== #{issue.title}
+              %tr
+                %td
+                  - icon = {'fixed' => '/green-check.png', 'wontfix' => '/red-check.png'}
+                  - if issue.status == :closed
+                    %img{:src => icon[issue.disposition_string]}
+                %td.littledate= issue.creation_time.pretty_date
+                %td.issuename
+                  %img{:src => gravatar(issue.reporter)}
+                  %a{:href => "/i/#{issue.id}"}== #{h issue.title}
     .footer Powered by <a href="http://ditz.rubyforge.org/">ditz</a>.
diff --git a/lib/views/issues.haml b/lib/views/issues.haml
new file mode 100644
index 0000000..407fe06
--- /dev/null
+++ b/lib/views/issues.haml
@@ -0,0 +1,22 @@
+%html
+  %head
+    %title== #{h project.name} Issue Tracker
+    %link{:href => "/style.css", :rel => "stylesheet", :type => "text/css",
+        :media => "screen"}
+  %body
+    .main
+      %h1== #{h project.name} Issue Tracker
+      %a{:href => "/i/new"} Add a new issue
+      %table
+        %tbody
+          - issues.each do |issue|
+            %tr
+              %td
+                - icon = {'fixed' => '/green-check.png', 'wontfix' => '/red-check.png'}
+                - if issue.status == :closed
+                  %img{:src => icon[issue.disposition_string]}
+              %td.littledate= issue.creation_time.pretty_date
+              %td.issuename
+                %img{:src => gravatar(issue.reporter)}
+                %a{:href => "/i/#{issue.id}"}== #{h issue.title}
+    .footer Powered by <a href="http://ditz.rubyforge.org/">ditz</a>.
diff --git a/lib/views/new.haml b/lib/views/new.haml
new file mode 100644
index 0000000..2c68aa5
--- /dev/null
+++ b/lib/views/new.haml
@@ -0,0 +1,36 @@
+%html
+  %head
+    %title Add a new issue
+    %link{:href => "/style.css", :rel => "stylesheet", :type => "text/css",
+        :media => "screen"}
+  %body
+    .main
+      %h1 Add a new issue
+      .backptr
+        %a{:href => '/'} &laquo; top page
+      %form{:action => '/i', :method => 'post'}
+        %p Summary
+        %input{:type => 'text', :name => 'summary', :size => 80, :value => summary}
+        %p Details
+        %textarea{:name => 'details', :rows => 12, :cols => 80}= details
+        %p Reference
+        %input{:type => 'text', :name => 'reference', :size => 80, :value => reference}
+        %p Your name &amp; email
+        %input{:type => 'text', :name => 'user'}
+        %p Issue type
+        - [:bugfix, :feature, :task].each do |t|
+          %input{:type => 'radio', :id => t, :name => 'type', :value => t,
+              :checked => t == :bugfix}
+          %label{:for => t}= t
+        %p Release, if any
+        %select{:name => 'release'}
+          %option{:value => '', :selected => true} No release
+          - releases.each do |r|
+            %option{:value => r.name, :selected => false}= r.name
+        %p Component
+        %select{:name => 'component'}
+          - components.each_with_index do |c, i|
+            %option{:value => c.name, :selected => i == 0}= c.name
+        %p
+          %input{:type => 'submit', :value => 'Submit issue'}
+    .footer Powered by <a href="http://ditz.rubyforge.org/">ditz</a>.
diff --git a/lib/views/show.haml b/lib/views/show.haml
index 98714b5..0db91df 100644
--- a/lib/views/show.haml
+++ b/lib/views/show.haml
@@ -1,16 +1,16 @@
 %html
   %head
-    %title= issues.first.title
+    %title= h issues.first.title
     %link{:href => "/style.css", :rel => "stylesheet", :type => "text/css",
         :media => "all"}
   %body
     .main
       - issues.each do |issue|
-        %h1= issue.title
+        %h1= h issue.title
         .backptr
           %a{:href => '/'} &laquo; top page
         .description
-          %p= issue.desc
+          %p= h(wiki issue.desc)
         %h2 Details
         %table
           %tbody
@@ -25,7 +25,9 @@
               %td.attrval= issue.creation_time
             %tr
               %td.attrname Creator:
-              %td.attrval= issue.reporter
+              %td.attrval
+                %img{:src => gravatar(issue.reporter)}
+                = h issue.reporter
             %tr
               %td.attrname Release:
               %td.attrval= issue.release
@@ -42,8 +44,8 @@
               %td.attrname References:
               %td.attrval
                 - issue.references.each do |ref|
-                  %li
-                    %a{:href => ref}= ref
+                  %a{:href => ref}= h ref
+                  %br
         %h2 Issue log
         %table.log
           %tbody
@@ -51,7 +53,46 @@
               - time, who, what, comment = log_event
               %tr{:class => i.odd? ? 'odd-row' : 'even-row'}
                 %td.date= time
-                %td.person= who
-                %td.logwhat= what
-                %td.message= comment
+                %td.person
+                  %img{:src => gravatar(who)}
+                  = h who
+                %td.message= what
+              %tr
+                %td.logcomment{:colspan => 3}
+                  %pre= wiki comment
+        %form{:action => "/i/#{issue.id}", :method => 'post'}
+          %input{:type => 'hidden', :name => '_method', :value => 'put'}
+          %p Comment
+          %textarea{:name => 'comment', :rows => 12, :cols => 80}
+          %p Reference
+          %input{:type => 'text', :name => 'reference', :size => 80}
+          %p Your name &amp; email
+          %input{:type => 'text', :name => 'user'}
+          %p Issue type
+          - [:bugfix, :feature, :task].each do |t|
+            %input{:type => 'radio', :id => t, :name => 'type', :value => t,
+                :checked => t == issue.type}
+            %label{:for => t}= t
+          %p Release, if any
+          %select{:name => 'release'}
+            - if issue.release.nil?
+              %option{:value => '', :selected => issue.release.nil?} No release
+            - releases.each do |r|
+              %option{:value => r.name, :selected => issue.release == r.name}= r.name
+          %p Component
+          %select{:name => 'component'}
+            - components.each do |c|
+              %option{:value => c.name, :selected => issue.component == c.name}= c.name
+          %p Status
+          %select{:name => 'status'}
+            - statuses = []
+            - st = issue.status
+            - statuses << :unstarted if st == :unstarted
+            - statuses << :paused if st == :in_progress || st == :paused
+            - statuses << :in_progress
+            - statuses << :closed
+            - statuses.each do |s|
+              %option{:value => s, :selected => issue.status == s}= s
+          %p
+            %input{:type => 'submit', :value => 'Submit issue'}
     .footer Powered by <a href="http://ditz.rubyforge.org/">ditz</a>.
diff --git a/sheila/sheila.rb b/sheila/sheila.rb
index 8e40f34..6d525fb 100644
--- a/sheila/sheila.rb
+++ b/sheila/sheila.rb
@@ -16,7 +16,7 @@ class String
   def gravatar(s=20)
     email = split.last
     email = email[1, email.size - 2] if email[0, 1] == '<'
-    "http://www.gravatar.com/avatar/#{Digest::MD5.hexdigest(email)}?s=#{s}"
+    "http://www.gravatar.com/avatar/#{Digest::MD5.hexdigest(email)}?s=#{s}&default=identicon"
   end
 end
 
