diff --git a/bin/ditzweb b/bin/ditzweb
index fe4625a..b572a42 100755
--- a/bin/ditzweb
+++ b/bin/ditzweb
@@ -30,7 +30,7 @@ def ditz_get_storage
   config.use_editor_if_possible = false # overwrite
   config.paginate = "never" # overwrite
   issue_dir = Pathname.new(config.issue_dir)
-  Ditz::FileStorage.new issue_dir
+  [config, Ditz::FileStorage.new(issue_dir)]
 end
 
 CONTENT_TYPES = {:html => 'text/html', :css => 'text/css',
@@ -46,7 +46,7 @@ before do
 end
 
 get '/' do
-  storage = ditz_get_storage
+  config, storage = ditz_get_storage
   project = storage.load
   releases = (project.unreleased_releases + [:unassigned]).inject({}) do |h,r|
     h[r] = {
@@ -58,14 +58,56 @@ get '/' do
   haml :index, :locals => { :releases => releases }
 end
 
+get '/i/new' do
+  config, storage = ditz_get_storage
+  project = storage.load
+  releases = project.releases
+  components = project.components
+  haml :new, :locals => { :releases => releases, :components => components }
+end
+
+get '/i/*' do |arg|
+  fn = File.join '.ditz', "issue-#{arg}*.yaml"
+  issues = Dir[fn].map { |fn| Ditz::Issue.from fn }
+  haml :show, :locals => { :issues => issues }
+end
+
+put '/i/*' do |arg|
+  fn = File.join '.ditz', "issue-#{arg}*.yaml"
+  issues = Dir[fn].map { |fn| Ditz::Issue.from fn }
+  # TODO
+  haml :show, :locals => { :issues => issues }
+end
+
 # lib/ditz/operator.rb
 # lib/ditz/model.rb
 # lib/ditz/model-objects.rb
 # lib/ditz/file-storage.rb
 # lib/views/index.haml
 # lib/views/show.haml
-get '/i/*' do |arg|
-  fn = File.join '.ditz', "issue-#{arg}*.yaml"
-  issues = Dir[fn].map { |fn| Ditz::Issue.from fn }
-  haml :show, :locals => { :issues => issues }
+# lib/views/new.haml
+post '/i/?' do
+  config, storage = ditz_get_storage
+  project = storage.load
+  user = params[:user] 
+  user = config.user if user.nil? || user.size == 0
+  summary = params[:summary]
+  details = params[:details] || ''
+  reference = params[:reference]
+  type = (params[:type] || :bugfix).to_sym
+  component = params[:component] ||  project.components.first.name
+  release = params[:release]
+  release = (project.releases.first.name rescue nil) if release.nil? || release.size == 0
+  issue = Ditz::Issue.create_interactively(:args => [config, project], :with => {
+      :title => summary, :desc => details, :type => type,
+      :component => component, :reporter => user, :release => release})
+  issue.changed!
+  project.add_issue issue
+  issue.log "created", user, ''
+  if reference && reference.size > 0
+    issue.add_reference reference
+    issue.log "added reference #{issue.references.size}", user, ''
+  end
+  storage.save project
+  redirect '/'
 end
diff --git a/contrib/tombloo_ditz.js b/contrib/tombloo_ditz.js
new file mode 100644
index 0000000..059e1f0
--- /dev/null
+++ b/contrib/tombloo_ditz.js
@@ -0,0 +1,32 @@
+// ../../extensions/
+models.register({
+	name : 'Ditz',
+	ICON : 'chrome://tombloo/skin/item.ico',
+	check : function(ps){
+		return (/(regular|photo|quote|link|conversation|video)/).test(ps.type) && !ps.file;
+	},
+	
+	getToken : function(){
+		return getCookieString('localhost', 'AT').split('=').pop();
+	},
+	
+	post : function(ps){
+		var self = this;
+		return request('http://localhost:4567/i/', {
+			redirectionLimit : 0,
+			sendContent : {
+//			at      : self.getToken(),
+//				tags       : joinText(ps.tags, ','),
+//				local      : this.getLocalTimestamp(),
+//				private    : ps.private? 1 : 0,
+				summary : ps.page,
+				details : joinText([ps.body, ps.description], ' ', true),
+				reference : ps.pageUrl,
+				image0  : ps.type == 'photo' ? ps.itemUrl : '',
+//      type : '',
+//      release : '',
+//      component : '',
+			},
+		});
+	},
+});
diff --git a/lib/views/index.haml b/lib/views/index.haml
index a6250c1..a9c48b0 100644
--- a/lib/views/index.haml
+++ b/lib/views/index.haml
@@ -6,6 +6,7 @@
   %body
     .main
       %h1 Issue Tracker
+      %a{:href => "/i/new"} Add a new issue
       %ul
         - releases.each do |key,release|
           %h2= release[:title]
diff --git a/lib/views/new.haml b/lib/views/new.haml
new file mode 100644
index 0000000..ba9df31
--- /dev/null
+++ b/lib/views/new.haml
@@ -0,0 +1,38 @@
+- p releases
+- p components
+%html
+  %head
+    %title Add a new issue
+    %link{:href => "/style.css", :rel => "stylesheet", :type => "text/css",
+        :media => "screen"}
+  %body
+    .main
+      %h1 Add a new issue
+      .backptr
+        %a{:href => '/'} &laquo; top page
+      %form{:action => '/i', :method => 'post'}
+        %p Summary
+        %input{:type => 'text', :name => 'summary', :size => 80}
+        %p Details
+        %textarea{:name => 'details', :rows => 12, :cols => 80}
+        %p Reference
+        %input{:type => 'text', :name => 'reference', :size => 80}
+        %p Your name &amp; email
+        %input{:type => 'text', :name => 'user'}
+        %p Issue type
+        - [:bugfix, :feature, :task].each do |t|
+          %input{:type => 'radio', :id => t, :name => 'type', :value => t,
+              :checked => t == :bugfix}
+          %label{:for => t}= t
+        %p Release, if any
+        %select{:name => 'release'}
+          %option{:value => '', :selected => true} No release
+          - releases.each do |r|
+            %option{:value => r.name, :selected => false}= r.name
+        %p Component
+        %select{:name => 'component'}
+          - components.each_with_index do |c, i|
+            %option{:value => c.name, :selected => i == 0}= c.name
+        %p
+          %input{:type => 'submit', :value => 'Submit issue'}
+    .footer Powered by <a href="http://ditz.rubyforge.org/">ditz</a>.
