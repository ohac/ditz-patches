diff --git a/bin/ditzweb b/bin/ditzweb
index fe4625a..0265b30 100755
--- a/bin/ditzweb
+++ b/bin/ditzweb
@@ -13,6 +13,7 @@ $:.unshift(File.dirname(self_file) + "/../lib")
 require 'rubygems'
 require 'ditz'
 require 'sinatra'
+require 'digest'
 
 set :sessions, true
 set :root, File.dirname(self_file) + "/../lib"
@@ -30,12 +31,22 @@ def ditz_get_storage
   config.use_editor_if_possible = false # overwrite
   config.paginate = "never" # overwrite
   issue_dir = Pathname.new(config.issue_dir)
-  Ditz::FileStorage.new issue_dir
+  [config, Ditz::FileStorage.new(issue_dir)]
 end
 
 CONTENT_TYPES = {:html => 'text/html', :css => 'text/css',
     :js => 'application/javascript'}
 
+helpers do
+  include Rack::Utils; alias_method :h, :escape_html
+  def gravatar(user, s = 20)
+    email = user.split.last
+    email = email[1, email.size - 2] if email[0, 1] == '<'
+    default = '&default=identicon'
+    "http://www.gravatar.com/avatar/#{Digest::MD5.hexdigest(email)}?s=#{s}#{default}"
+  end
+end
+
 before do
  request_uri = case request.env['REQUEST_URI']
    when /\.css$/; :css
@@ -46,7 +57,7 @@ before do
 end
 
 get '/' do
-  storage = ditz_get_storage
+  config, storage = ditz_get_storage
   project = storage.load
   releases = (project.unreleased_releases + [:unassigned]).inject({}) do |h,r|
     h[r] = {
@@ -58,14 +69,74 @@ get '/' do
   haml :index, :locals => { :releases => releases }
 end
 
+get '/i/new' do
+  config, storage = ditz_get_storage
+  project = storage.load
+  releases = project.releases
+  components = project.components
+  haml :new, :locals => { :releases => releases, :components => components,
+      :reference => params[:u], :summary => params[:t], :details => params[:s] }
+end
+
+get '/i/*' do |arg|
+  config, storage = ditz_get_storage
+  project = storage.load
+  releases = project.releases
+  components = project.components
+  fn = File.join '.ditz', "issue-#{arg}*.yaml"
+  issues = Dir[fn].map { |fn| Ditz::Issue.from fn }
+  haml :show, :locals => { :issues => issues, :releases => releases,
+      :components => components }
+end
+
+put '/i/*' do |arg|
+  config, storage = ditz_get_storage
+  comment = params[:comment]
+  reference = params[:reference] # TODO
+  component = params[:component] # TODO
+  type = params[:type] # TODO
+  user = params[:user]
+  user = config.user if user.nil? || user.size == 0
+  release = params[:release] # TODO
+  if comment.size > 0
+    project = storage.load
+    fn = File.join '.ditz', "issue-#{arg}.yaml"
+    issue = Ditz::Issue.from fn
+    issue.log "commented", user, comment
+    project.add_issue issue
+    storage.save project
+  end
+  redirect "/i/#{arg}"
+end
+
 # lib/ditz/operator.rb
 # lib/ditz/model.rb
 # lib/ditz/model-objects.rb
 # lib/ditz/file-storage.rb
 # lib/views/index.haml
 # lib/views/show.haml
-get '/i/*' do |arg|
-  fn = File.join '.ditz', "issue-#{arg}*.yaml"
-  issues = Dir[fn].map { |fn| Ditz::Issue.from fn }
-  haml :show, :locals => { :issues => issues }
+# lib/views/new.haml
+post '/i/?' do
+  config, storage = ditz_get_storage
+  project = storage.load
+  user = params[:user] 
+  user = config.user if user.nil? || user.size == 0
+  summary = params[:summary]
+  details = params[:details] || ''
+  reference = params[:reference]
+  type = (params[:type] || :bugfix).to_sym
+  component = params[:component] ||  project.components.first.name
+  release = params[:release]
+  release = (project.releases.first.name rescue nil) if release.nil? || release.size == 0
+  issue = Ditz::Issue.create_interactively(:args => [config, project], :with => {
+      :title => summary, :desc => details, :type => type,
+      :component => component, :reporter => user, :release => release})
+  project.add_issue issue
+  issue.log "created", user, ''
+  if reference && reference.size > 0
+    issue.add_reference reference
+    issue.log "added reference #{issue.references.size}", user, ''
+  end
+  storage.save project
+  redirect "/i/#{issue.id}"
 end
diff --git a/contrib/tombloo_ditz.js b/contrib/tombloo_ditz.js
new file mode 100644
index 0000000..059e1f0
--- /dev/null
+++ b/contrib/tombloo_ditz.js
@@ -0,0 +1,32 @@
+// ../../extensions/
+models.register({
+	name : 'Ditz',
+	ICON : 'chrome://tombloo/skin/item.ico',
+	check : function(ps){
+		return (/(regular|photo|quote|link|conversation|video)/).test(ps.type) && !ps.file;
+	},
+	
+	getToken : function(){
+		return getCookieString('localhost', 'AT').split('=').pop();
+	},
+	
+	post : function(ps){
+		var self = this;
+		return request('http://localhost:4567/i/', {
+			redirectionLimit : 0,
+			sendContent : {
+//			at      : self.getToken(),
+//				tags       : joinText(ps.tags, ','),
+//				local      : this.getLocalTimestamp(),
+//				private    : ps.private? 1 : 0,
+				summary : ps.page,
+				details : joinText([ps.body, ps.description], ' ', true),
+				reference : ps.pageUrl,
+				image0  : ps.type == 'photo' ? ps.itemUrl : '',
+//      type : '',
+//      release : '',
+//      component : '',
+			},
+		});
+	},
+});
diff --git a/lib/views/index.haml b/lib/views/index.haml
index a6250c1..2c8d485 100644
--- a/lib/views/index.haml
+++ b/lib/views/index.haml
@@ -6,11 +6,15 @@
   %body
     .main
       %h1 Issue Tracker
+      %a{:href => "/i/new"} Add a new issue
+      %br
+      %a{:href => "javascript:var%20d=document,w=window,e=w.getSelection,k=d.getSelection,x=d.selection,s=(e?e():(k)?k():(x?x.createRange().text:0)),f='http://localhost:4567/i/new',l=d.location,e=encodeURIComponent,p='?u='+e(l.href)+'&t='+e(d.title)+'&s='+e(s),u=f+p;l.href=u;"} Bookmarklet
       %ul
         - releases.each do |key,release|
-          %h2= release[:title]
+          %h2= h release[:title]
           %ul
             - release[:issues].each do |issue|
               %li
-                %a{:href => "/i/#{issue.id}"}== #{issue.title}
+                %img{:src => gravatar(issue.reporter)}
+                %a{:href => "/i/#{issue.id}"}== #{h issue.title}
     .footer Powered by <a href="http://ditz.rubyforge.org/">ditz</a>.
diff --git a/lib/views/new.haml b/lib/views/new.haml
new file mode 100644
index 0000000..ebdb572
--- /dev/null
+++ b/lib/views/new.haml
@@ -0,0 +1,38 @@
+- p releases
+- p components
+%html
+  %head
+    %title Add a new issue
+    %link{:href => "/style.css", :rel => "stylesheet", :type => "text/css",
+        :media => "screen"}
+  %body
+    .main
+      %h1 Add a new issue
+      .backptr
+        %a{:href => '/'} &laquo; top page
+      %form{:action => '/i', :method => 'post'}
+        %p Summary
+        %input{:type => 'text', :name => 'summary', :size => 80, :value => summary}
+        %p Details
+        %textarea{:name => 'details', :rows => 12, :cols => 80}= details
+        %p Reference
+        %input{:type => 'text', :name => 'reference', :size => 80, :value => reference}
+        %p Your name &amp; email
+        %input{:type => 'text', :name => 'user'}
+        %p Issue type
+        - [:bugfix, :feature, :task].each do |t|
+          %input{:type => 'radio', :id => t, :name => 'type', :value => t,
+              :checked => t == :bugfix}
+          %label{:for => t}= t
+        %p Release, if any
+        %select{:name => 'release'}
+          %option{:value => '', :selected => true} No release
+          - releases.each do |r|
+            %option{:value => r.name, :selected => false}= r.name
+        %p Component
+        %select{:name => 'component'}
+          - components.each_with_index do |c, i|
+            %option{:value => c.name, :selected => i == 0}= c.name
+        %p
+          %input{:type => 'submit', :value => 'Submit issue'}
+    .footer Powered by <a href="http://ditz.rubyforge.org/">ditz</a>.
diff --git a/lib/views/show.haml b/lib/views/show.haml
index 98714b5..761f97b 100644
--- a/lib/views/show.haml
+++ b/lib/views/show.haml
@@ -1,16 +1,16 @@
 %html
   %head
-    %title= issues.first.title
+    %title= h issues.first.title
     %link{:href => "/style.css", :rel => "stylesheet", :type => "text/css",
         :media => "all"}
   %body
     .main
       - issues.each do |issue|
-        %h1= issue.title
+        %h1= h issue.title
         .backptr
           %a{:href => '/'} &laquo; top page
         .description
-          %p= issue.desc
+          %p= h issue.desc
         %h2 Details
         %table
           %tbody
@@ -25,7 +25,9 @@
               %td.attrval= issue.creation_time
             %tr
               %td.attrname Creator:
-              %td.attrval= issue.reporter
+              %td.attrval
+                %img{:src => gravatar(issue.reporter)}
+                = h issue.reporter
             %tr
               %td.attrname Release:
               %td.attrval= issue.release
@@ -42,8 +44,8 @@
               %td.attrname References:
               %td.attrval
                 - issue.references.each do |ref|
-                  %li
-                    %a{:href => ref}= ref
+                  %a{:href => ref}= h ref
+                  %br
         %h2 Issue log
         %table.log
           %tbody
@@ -51,7 +53,33 @@
               - time, who, what, comment = log_event
               %tr{:class => i.odd? ? 'odd-row' : 'even-row'}
                 %td.date= time
-                %td.person= who
+                %td.person
+                  %img{:src => gravatar(who)}
+                  = who
                 %td.logwhat= what
                 %td.message= comment
+        %form{:action => "/i/#{issue.id}", :method => 'post'}
+          %input{:type => 'hidden', :name => '_method', :value => 'put'}
+          %p Comment
+          %textarea{:name => 'comment', :rows => 12, :cols => 80}
+          %p Reference
+          %input{:type => 'text', :name => 'reference', :size => 80}
+          %p Your name &amp; email
+          %input{:type => 'text', :name => 'user'}
+          %p Issue type
+          - [:bugfix, :feature, :task].each do |t|
+            %input{:type => 'radio', :id => t, :name => 'type', :value => t,
+                :checked => t == :bugfix}
+            %label{:for => t}= t
+          %p Release, if any
+          %select{:name => 'release'}
+            %option{:value => '', :selected => true} No release
+            - releases.each do |r|
+              %option{:value => r.name, :selected => false}= r.name
+          %p Component
+          %select{:name => 'component'}
+            - components.each_with_index do |c, i|
+              %option{:value => c.name, :selected => i == 0}= c.name
+          %p
+            %input{:type => 'submit', :value => 'Submit issue'}
     .footer Powered by <a href="http://ditz.rubyforge.org/">ditz</a>.
diff --git a/sheila/sheila.rb b/sheila/sheila.rb
index 8e40f34..6d525fb 100644
--- a/sheila/sheila.rb
+++ b/sheila/sheila.rb
@@ -16,7 +16,7 @@ class String
   def gravatar(s=20)
     email = split.last
     email = email[1, email.size - 2] if email[0, 1] == '<'
-    "http://www.gravatar.com/avatar/#{Digest::MD5.hexdigest(email)}?s=#{s}"
+    "http://www.gravatar.com/avatar/#{Digest::MD5.hexdigest(email)}?s=#{s}&default=identicon"
   end
 end
 
