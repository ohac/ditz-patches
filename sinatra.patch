diff --git a/bin/ditzweb b/bin/ditzweb
new file mode 100755
index 0000000..fe4625a
--- /dev/null
+++ b/bin/ditzweb
@@ -0,0 +1,71 @@
+#!/usr/bin/env ruby
+# -*- coding: utf-8 -*-
+
+self_file =
+    if File.symlink?(__FILE__)
+      require 'pathname'
+      Pathname.new(__FILE__).realpath
+    else
+      __FILE__
+    end
+$:.unshift(File.dirname(self_file) + "/../lib")
+
+require 'rubygems'
+require 'ditz'
+require 'sinatra'
+
+set :sessions, true
+set :root, File.dirname(self_file) + "/../lib"
+
+CONFIG_FN = ".ditz-config"
+
+def ditz_config_file
+  config_dir = Ditz::find_dir_containing CONFIG_FN
+  File.join(config_dir || ".", CONFIG_FN)
+end
+
+def ditz_get_storage
+  config_file = ditz_config_file
+  config = Ditz::Config.from config_file
+  config.use_editor_if_possible = false # overwrite
+  config.paginate = "never" # overwrite
+  issue_dir = Pathname.new(config.issue_dir)
+  Ditz::FileStorage.new issue_dir
+end
+
+CONTENT_TYPES = {:html => 'text/html', :css => 'text/css',
+    :js => 'application/javascript'}
+
+before do
+ request_uri = case request.env['REQUEST_URI']
+   when /\.css$/; :css
+   when /\.js$/; :js
+   else :html
+ end
+ content_type CONTENT_TYPES[request_uri], :charset => 'utf-8'
+end
+
+get '/' do
+  storage = ditz_get_storage
+  project = storage.load
+  releases = (project.unreleased_releases + [:unassigned]).inject({}) do |h,r|
+    h[r] = {
+      :title => r == :unassigned ? "Unassigned:" : "#{r.name} (#{r.status}):",
+      :issues => project.issues_for_release(r).sort_by { |i| i.sort_order }
+    }
+    h
+  end
+  haml :index, :locals => { :releases => releases }
+end
+
+# lib/ditz/operator.rb
+# lib/ditz/model.rb
+# lib/ditz/model-objects.rb
+# lib/ditz/file-storage.rb
+# lib/views/index.haml
+# lib/views/show.haml
+get '/i/*' do |arg|
+  fn = File.join '.ditz', "issue-#{arg}*.yaml"
+  issues = Dir[fn].map { |fn| Ditz::Issue.from fn }
+  haml :show, :locals => { :issues => issues }
+end
diff --git a/lib/public/style.css b/lib/public/style.css
new file mode 100644
index 0000000..0a59d3a
--- /dev/null
+++ b/lib/public/style.css
@@ -0,0 +1,226 @@
+body {
+  font-family: "lucida grande", "sans serif";
+  color: #333;
+  width: 60em;
+  margin: auto;
+}
+
+div.main {
+  padding: 20px;
+  margin: auto;
+  padding-top: 0;
+  margin-top: 1em;
+  background-color: #fcfcfc;
+}
+
+.person {
+  font-family: courier;
+}
+
+a, a:visited {
+  background: inherit;
+  text-decoration: none;
+}
+
+a {
+  color: #003d41;
+}
+
+a:visited {
+  color: #553d41;
+}
+
+ul {
+  list-style-type: none;
+  padding: 0;
+}
+
+p {
+  width: 40em;
+}
+
+.inline-status-image {
+  position: relative;
+  top: 0.2em;
+}
+
+.dimmed {
+  color: #bbb;
+}
+
+table {
+  border-style: none;
+  border-spacing: 0;
+}
+
+table.log {
+}
+
+
+td {
+  border-width: 0;
+  border-style: none;
+  padding-right: 0.5em;
+  padding-left: 0.5em;
+}
+
+tr {
+  vertical-align: top;
+}
+
+h1 {
+  padding: 0.5em;
+  margin-left: -20px;
+  margin-right: -20px;
+  background-color: #305275;
+  margin-top: 0;
+  margin-bottom: 0;
+  color: #fff;
+}
+
+h2 {
+  text-transform: uppercase;
+  font-size: smaller;
+  margin-top: 1em;
+  margin-left: -0.5em;
+  width: 100%;
+  /*background: #fffbce;*/
+  /*background: #628a0d;*/
+  padding: 5px;
+  color: #305275;
+}
+
+.attrname {
+  text-align: right;
+  font-size: smaller;
+}
+
+.attrval {
+  color: #222;
+}
+
+.issue-closed-fixed {
+  background-image: "green-check.png";
+}
+
+.issue-closed-wontfix {
+  background-image: "red-check.png";
+}
+
+.issue-closed-reorg {
+  background-image: "blue-check.png";
+}
+
+.inline-issue-link {
+  text-decoration: underline;
+}
+
+img {
+  border: 0;
+}
+
+/*
+.issuestatus_closed {
+  background-color: #f2fff2;
+  text-align: center;
+}
+
+.issuestatus_in_progress {
+  background-color: #fffff2;
+  text-align: center;
+}
+
+.issuestatus_paused {
+  background-color: #fffff2;
+  text-align: center;
+}
+
+.issuestatus_unstarted {
+  background-color: #fff2f2;
+  text-align: center;
+}
+
+.issuestatus_closed a {
+  color: #202020;
+}
+
+.issuestatus_in_progress a {
+  color: #202020;
+}
+
+.issuestatus_paused a {
+  color: #202020;
+}
+
+.issuestatus_unstarted a {
+  color: #202020;
+}
+*/
+
+div.footer {
+  font-size: small;
+  padding-left: 20px;
+  padding-right: 20px;
+  padding-top: 5px;
+  padding-bottom: 5px;
+  margin: auto;
+  background: #305275;
+  color: #fffee7;
+}
+
+.footer a {
+  color: #508d91;
+}
+
+.even-row {
+  font-size: smaller;
+  background-color: #f2f2f2;
+}
+
+.odd-row {
+  font-size: smaller;
+  background-color: #f2f2f2;
+}
+
+.backptr {
+  font-size: smaller;
+  width: 100%;
+  text-align: left;
+  padding-bottom: 1em;
+  margin-top: 0;
+}
+
+.logcomment {
+  padding-left: 4em;
+  font-size: smaller;
+}
+
+.id {
+  font-family: monospace;
+}
+
+.description {
+  background: #f2f2f2;
+  padding-left: 1em;
+  padding-right: 1em;
+  padding-top: 0.5em;
+  padding-bottom: 0.5em;
+}
+
+.message {
+}
+
+.littledate {
+  font-size: smaller;
+}
+
+.progress-meter-done {
+  background-color: #03af00;
+}
+
+.progress-meter-undone {
+  background-color: #ddd;
+}
+
+.progress-meter {
+}
diff --git a/lib/views/index.haml b/lib/views/index.haml
new file mode 100644
index 0000000..a6250c1
--- /dev/null
+++ b/lib/views/index.haml
@@ -0,0 +1,16 @@
+%html
+  %head
+    %title Issue Tracker
+    %link{:href => "/style.css", :rel => "stylesheet", :type => "text/css",
+        :media => "screen"}
+  %body
+    .main
+      %h1 Issue Tracker
+      %ul
+        - releases.each do |key,release|
+          %h2= release[:title]
+          %ul
+            - release[:issues].each do |issue|
+              %li
+                %a{:href => "/i/#{issue.id}"}== #{issue.title}
+    .footer Powered by <a href="http://ditz.rubyforge.org/">ditz</a>.
diff --git a/lib/views/show.haml b/lib/views/show.haml
new file mode 100644
index 0000000..98714b5
--- /dev/null
+++ b/lib/views/show.haml
@@ -0,0 +1,57 @@
+%html
+  %head
+    %title= issues.first.title
+    %link{:href => "/style.css", :rel => "stylesheet", :type => "text/css",
+        :media => "all"}
+  %body
+    .main
+      - issues.each do |issue|
+        %h1= issue.title
+        .backptr
+          %a{:href => '/'} &laquo; top page
+        .description
+          %p= issue.desc
+        %h2 Details
+        %table
+          %tbody
+            %tr
+              %td.attrname Id:
+              %td.attrval= issue.id
+            %tr
+              %td.attrname Type:
+              %td.attrval= issue.type
+            %tr
+              %td.attrname Creation time:
+              %td.attrval= issue.creation_time
+            %tr
+              %td.attrname Creator:
+              %td.attrval= issue.reporter
+            %tr
+              %td.attrname Release:
+              %td.attrval= issue.release
+            %tr
+              %td.attrname Component:
+              %td.attrval= issue.component
+            %tr
+              %td.attrname Status:
+              %td.attrval= issue.status
+            %tr
+              %td.attrname Disposition:
+              %td.attrval= issue.disposition
+            %tr
+              %td.attrname References:
+              %td.attrval
+                - issue.references.each do |ref|
+                  %li
+                    %a{:href => ref}= ref
+        %h2 Issue log
+        %table.log
+          %tbody
+            - issue.log_events.each_with_index do |log_event, i|
+              - time, who, what, comment = log_event
+              %tr{:class => i.odd? ? 'odd-row' : 'even-row'}
+                %td.date= time
+                %td.person= who
+                %td.logwhat= what
+                %td.message= comment
+    .footer Powered by <a href="http://ditz.rubyforge.org/">ditz</a>.
